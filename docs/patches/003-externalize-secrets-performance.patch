--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -2,8 +2,8 @@
 spring.application.name=B3DataManager
 # Configuracao do banco de dados MariaDB
 spring.datasource.url=jdbc:mariadb://${DB_HOST:192.168.22.245}:${DB_PORT:5555}/financeiro
-spring.datasource.username=${DB_USER:user}
-spring.datasource.password=${DB_PASSWORD:nB132MUlpZ4jxn7f}
+spring.datasource.username=${DB_USER:}
+spring.datasource.password=${DB_PASSWORD:}
 # Configuracoes gerais do Hibernate
 spring.jpa.hibernate.ddl-auto=update
 spring.jpa.show-sql=false
@@ -32,7 +32,7 @@
 logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
 #API Alpha
-api.alpha.key=BRRQ6MQO8CYYPM5M
+api.alpha.key=${API_ALPHA_KEY:}
 # Configuracao de processamento em lotes
 app.batch.size=${BATCH_SIZE:1000}
 # Log de debug para componentes específicos
@@ -40,7 +40,7 @@
 # Configuracao de senha administrativa de fallback
 admin.username=admin
-admin.password=${ADMIN_PASSWORD:admin123} # Senha padrao pode ser sobrescrita por variavel de ambiente
+admin.password=${ADMIN_PASSWORD:} # Senha deve ser definida via variavel de ambiente
 # Diretorio base para armazenamento de arquivos importados
 import.folder=uploads
 # Spring batch
@@ -57,3 +57,12 @@
 batch.scheduler.retry.maxAttempts=${BATCH_SCHEDULER_RETRY_MAX_ATTEMPTS:3}
 batch.scheduler.retry.waitDuration=${BATCH_SCHEDULER_RETRY_WAIT_DURATION:5000}
 
+# Performance e JPA otimizacoes
+spring.jpa.open-in-view=false
+spring.jpa.properties.hibernate.jdbc.batch_size=25
+spring.jpa.properties.hibernate.order_inserts=true
+spring.jpa.properties.hibernate.order_updates=true
+spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
+
+# Configuracao de logs por ambiente
+logging.level.br.dev.rodrigopinheiro=${LOG_LEVEL:INFO}
--- a/src/main/java/br/dev/rodrigopinheiro/B3DataManager/domain/entity/Usuario.java
+++ b/src/main/java/br/dev/rodrigopinheiro/B3DataManager/domain/entity/Usuario.java
@@ -37,7 +37,7 @@
     @NotBlank(message = "O email não pode estar vazio.")
     private String email;
 
-    @ElementCollection(fetch = FetchType.EAGER)
+    @ElementCollection(fetch = FetchType.LAZY)
     @Enumerated(EnumType.STRING)
     private Set<Roles> roles;